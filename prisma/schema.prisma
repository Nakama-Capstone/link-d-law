// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  //   for debian
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x", "linux-arm64-openssl-1.1.x"]
  output        = "./prisma-client" //Change output to custom path
  //   binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Law {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  LawBab      LawBab[]
}

model LawBab {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lawId       Int
  law         Law       @relation(fields: [lawId], references: [id])
  LawData     LawData[]
}

model LawData {
  id        Int      @id @default(autoincrement())
  pasal     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lawBabId  Int
  lawBab    LawBab   @relation(fields: [lawBabId], references: [id])
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  firstName  String
  middleName String?
  lastName   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  image      String?
  chat1      Chat[]    @relation("user1_id")
  chat2      Chat[]    @relation("user2_id")
  from       Message[] @relation("from")
  to         Message[] @relation("to")

  Lawyer Lawyer?
}

model Chat {
  id       Int       @id @default(autoincrement())
  user1_id Int
  user2_id Int
  user1    User      @relation("user1_id", fields: [user1_id], references: [id])
  user2    User      @relation("user2_id", fields: [user2_id], references: [id])
  Message  Message[]
}

model Message {
  id      Int      @id @default(autoincrement())
  chatId  Int
  from    Int
  to      Int
  message String
  time    DateTime @default(now())
  chat    Chat     @relation(fields: [chatId], references: [id])
  fromId  User     @relation("from", fields: [from], references: [id])
  toId    User     @relation("to", fields: [to], references: [id])
}

model Lawyer {
  id                    Int                     @id @default(autoincrement())
  userId                Int                     @unique
  specialist            String
  rate                  Int
  nomorPerandi          String
  fee                   Int
  educationalBackground educationalBackground[]
  firmaHukum            firmaHukum[]

  // set references user one to one lawyer, wen lawyter deleted relation set null
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model educationalBackground {
  id         Int    @id @default(autoincrement())
  lawyerId   Int
  university String
  major      String
  lawyer     Lawyer @relation(fields: [lawyerId], references: [id], onDelete: Cascade)
}

model firmaHukum {
  id       Int    @id @default(autoincrement())
  lawyerId Int
  name     String
  lawyer   Lawyer @relation(fields: [lawyerId], references: [id], onDelete: Cascade)
}
